services:
  users-db:
    image: mongo:latest
    container_name: users-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./data/users:/data/db
    networks:
      - telemetry

  tickets-db:
    build:
      context: ../Tickets/.
      dockerfile: ../Tickets/Dockerfile-mongodb
    container_name: tickets-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27018:27018
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27018
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27018'}]}) }" | mongosh --port 27018 -u root -p root --authenticationDatabase admin > /dev/null
      interval: 5s
      timeout: 15s
      start_period: 15s
      retries: 10
    volumes:
      - data:/data/db
    networks:
      - telemetry

  events-db:
    image: mongo:latest
    container_name: events-db
    restart: always
    ports:
      - "27019:27019"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./data/events:/data/db
    networks:
      - telemetry


  users1:
    image: users
    build:
      context: ../Users/.
    container_name: users1
    restart: always
    ports:
      - "3002:3002"
    env_file:
      - ../Users/.env
    depends_on:
      - users-db
      - rabbitmq
    networks:
      - telemetry

  users2:
    image: users
    build:
      context: ../Users/.
    container_name: users2
    restart: always
    ports:
      - "4002:3002"
    env_file:
      - ../Users/.env
    depends_on:
      - users-db
      - rabbitmq
    networks:
      - telemetry


  nginx-gateway:
    image: nginx:latest
    container_name: nginx-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - users1
      - users2
      # - tickets
      # - events
      # - auth
      # - notification
    networks:
      - telemetry


  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - 5672:5672    #amqp
      - 15672:15672  #http
      - 15692:15692  #prometheus
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
    networks:
      - telemetry

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "4317:4317"
      - "4318:4318"
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - telemetry

  swagger:
    image: swagger
    container_name: swagger
    restart: always
    ports:
      - "4000:4000"
    depends_on:
      - users1
      - users2
      # - tickets
      # - events
      # - auth
    networks:
      - telemetry

  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-express
  #   restart: always
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@users-db:27017/
  #   depends_on:
  #     - users-db
  #   networks:
  #     - telemetry

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    devices:
      - /dev/kmsg:/dev/kmsg
    depends_on:
      - users1
      - users2
      - users-db
    networks:
      - telemetry

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - telemetry

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: always
    user: root
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/data:/var/lib/grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    networks:
      - telemetry

  mongodb_exporter:
    image: percona/mongodb_exporter:0.40.0
    container_name: mongodb_exporter
    restart: always
    command: --mongodb.uri="mongodb://root:example@users-db:27017/UsersDB?authSource=admin&authMechanism=SCRAM-SHA-256" --collect-all --discovering-mode
    ports:
      - "9216:9216"
    depends_on:
      - users-db
    networks:
      - telemetry

networks:
  telemetry:

volumes:
  data: {}